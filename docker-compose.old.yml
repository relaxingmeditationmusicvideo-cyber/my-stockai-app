# docker-compose.yml - Complete StockAI Pro Stack
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stockai_postgres
    environment:
      POSTGRES_DB: stockai_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_secure_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - stockai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stockai_redis
    command: redis-server --appendonly yes --requirepass your_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - stockai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: .
    container_name: stockai_backend
    environment:
      - DATABASE_URL=postgresql://postgres:your_secure_password@postgres:5432/stockai_db
      - REDIS_URL=redis://:your_redis_password@redis:6379
      - JWT_SECRET=your_very_secure_jwt_secret_key_here
      - ALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=your_email@gmail.com
      - EMAIL_PASSWORD=your_app_password
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stockai_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: stockai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/usr/share/nginx/html
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - stockai_network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery_worker:
    build: .
    container_name: stockai_celery
    command: celery -A main.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:your_secure_password@postgres:5432/stockai_db
      - REDIS_URL=redis://:your_redis_password@redis:6379
      - JWT_SECRET=your_very_secure_jwt_secret_key_here
    depends_on:
      - postgres
      - redis
    networks:
      - stockai_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build: .
    container_name: stockai_celery_beat
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:your_secure_password@postgres:5432/stockai_db
      - REDIS_URL=redis://:your_redis_password@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - stockai_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Flower (Celery monitoring)
  flower:
    build: .
    container_name: stockai_flower
    command: celery -A main.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://:your_redis_password@redis:6379
    depends_on:
      - redis
    networks:
      - stockai_network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: stockai_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - stockai_network
    restart: unless-stopped

  # Grafana (Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: stockai_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - stockai_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  stockai_network:
    driver: bridge